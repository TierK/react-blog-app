{"version":3,"sources":["Header/Header.js","LeftSideBar/LeftSideBar.js","RightSideBar/RightSideBar.js","Footer/Footer.js","Main/Dialogs/Dialogs.js","Main/Settings/Settings.js","Main/Profile/Profile.js","Main/Feeds/Feeds.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","Component","LeftSideBar","to","RightSideBar","Footer","Dialogs","Settings","Profile","Feeds","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAGqBA,E,iLAEjB,OACE,yBAAKC,UAAU,UACb,yBAAKC,IAAI,2D,GAJmBC,a,gBCCfC,E,iLAEb,OACI,yBAAKH,UAAU,eACZ,kBAAC,IAAD,CAASI,GAAG,UAAZ,SACA,kBAAC,IAAD,CAASA,GAAG,YAAZ,WACA,kBAAC,IAAD,CAASA,GAAG,YAAZ,WACA,kBAAC,IAAD,CAASA,GAAG,aAAZ,iB,GAP0BF,aCFpBG,E,iLAEb,OACI,yBAAKL,UAAU,gBAAf,kK,GAH8BE,aCArBI,E,iLAEb,OACI,yBAAKN,UAAU,UAAf,sE,GAHwBE,a,QCCfK,E,iLAEb,OACI,4C,GAHyBL,aCAhBM,E,iLAEb,OACI,6C,GAH0BN,aCDjBO,E,iLAEb,OACI,4C,GAHyBP,aCAhBQ,E,iLAEb,OACI,0C,GAHuBR,aC8BpBS,MAnBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKX,UAAU,gBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,wBACX,kBAAC,IAAD,CAAOY,KAAK,SAASC,UAAWH,IAChC,kBAAC,IAAD,CAAOE,KAAK,WAAWC,UAAWJ,IAClC,kBAAC,IAAD,CAAOG,KAAK,WAAWC,UAAWN,IAClC,kBAAC,IAAD,CAAOK,KAAK,YAAYC,UAAWL,KAEvC,kBAAC,EAAD,MACA,kBAAC,EAAD,SCdYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cf6ad830.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <div className=\"Header\">\n        <img src=\"https://i-love-png.com/images/blog-logo_14551.png\"/>\n      </div>\n    )\n  }\n}\n\n","import React, { Component } from 'react';\r\nimport './LeftSideBar.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport default class LeftSideBar extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"LeftSideBar\">\r\n               <NavLink to=\"/feeds\">Feeds</NavLink>\r\n               <NavLink to=\"/profile\">Profile</NavLink>\r\n               <NavLink to=\"/dialogs\">Dialogs</NavLink>\r\n               <NavLink to=\"/settings\">Settings</NavLink>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class RightSideBar extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"RightSideBar\">\r\n                RightSideBar RightSideBar RightSideBar RightSideBar RightSideBar RightSideBar RightSideBar RightSideBarRightSideBar RightSideBar RightSideBarRightSideBarv\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Footer\">\r\n                Footer Footer Footer Footer Footer Footer Footer Footer Footer \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\n\r\nexport default class Dialogs extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Dialogs\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\n\r\nexport default class Settings extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Settings\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Profile extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Profile\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Feeds extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Feeds\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport 'normalize.css';\nimport Header from './Header/Header';\nimport LeftSideBar from './LeftSideBar/LeftSideBar';\nimport RightSideBar from './RightSideBar/RightSideBar';\nimport Footer from './Footer/Footer';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport Dialogs from './Main/Dialogs/Dialogs';\nimport Settings from './Main/Settings/Settings';\nimport Profile from './Main/Profile/Profile';\nimport Feeds from './Main/Feeds/Feeds';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"blog-wrapper\">\n        <Header />\n        <LeftSideBar/>\n        <div className=\"blog-wrapper-content\">\n            <Route path='/feeds' component={Feeds}/>\n            <Route path='/profile' component={Profile}/>\n            <Route path='/dialogs' component={Dialogs}/>\n            <Route path='/settings' component={Settings}/>\n        </div>\n        <RightSideBar/>\n        <Footer/>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}